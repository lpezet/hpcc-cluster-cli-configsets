# Functions

RED='\033[1;31m'
ORANGE='\033[1;33m'
GREEN='\033[1;32m'
NC='\033[0m' # No Color

source /opt/hpcc-cluster/cluster.config

log() {
 local level=$1
 local message=$2
 local echoMessage=$message
 local levelUpper=$(echo "$level" | tr /a-z/ /A-Z/)
 if [ "$level" = "info" ]; then
  echoMessage="[$(date)] ${GREEN}$levelUpper${NC}  $message"
 elif [ "$level" = "error" ]; then
  echoMessage="[$(date)] ${RED}$levelUpper${NC} $message"
 elif [ "$level" = "warn" ]; then
  echoMessage="[$(date)] ${ORANGE}$levelUpper${NC}  $message"
 fi
 echo -e "$echoMessage"
 echo -e "[$(date)] $levelUpper $message" >> /var/log/hpcc_cluster.log
}

get_encryption_passphrase() {
 local _outResult=$1 
 _reply=$(aws --region ${cluster_region} ssm get-parameter --name "/hpcc-clusters/${aws_username}/${cluster_name}/luks" --with-decryption --query 'Parameter.Value' | sed 's/"//g')
 eval "$_outResult='$_reply'"
 return 0
}

open_encrypted_device() {
 local _outDevicename=$1
 local _deviceName=$2
 
 local name=$(echo "$_deviceName" | cut -d'/' -f 3)
 
 if [ -b /dev/mapper/$name ]; then
  log info "Device $_deviceName already opened. Skipping."
 else
  local _passphrase=""
  get_encryption_passphrase _passphrase
  #log ingo "Getting device UUID..."
  #local UUID=$(cryptsetup luksUUID $_deviceName)
 
  #log info "Opening device UUID #$UUID with name $name..."
  local fail=0
  #WARNING: somehow this doesn't work well. cryptsetup and blkid will provide UUID of device being formatted with luks, but somehow it won't be listed in /dev/disk/by-uuid.
  #and I get Device UUID=5ef12563-7446-4902-95f0-ac7e6117a3c1 doesn't exist or access denied.
  #(echo "$_passphrase" | cryptsetup luksOpen UUID=${UUID} $name 2>&1 >> /var/log/hpcc_cluster.log) || fail=1
  #if [ "$fail" = "1" ]; then
  # fail=0
   log info "Opening device $_deviceName with name $name..."
   (echo "$_passphrase" | cryptsetup luksOpen $_deviceName $name 2>&1 >> /var/log/hpcc_cluster.log) || fail=1
   if [ "$fail" = "1" ]; then
    log error "Could not open encrypted device $_deviceName (UUID=$UUID)."
    return 1
   fi
  #fi
  unset _passphrase
 fi
 
 _reply="/dev/mapper/$name"
 eval "$_outDevicename='$_reply'"
 return 0
}

encrypt_device() {
 local outDeviceName=$1
 local _deviceName=$2
 local _deviceType=$3
  
 log info "Encrypting device $deviceName (type=$deviceType)..."
 local _passphrase=""
 get_encryption_passphrase _passphrase
 
 log info "Setting up LUKS format on device $deviceName..."
 local fail=0
 (echo "$_passphrase" | cryptsetup -q luksFormat $deviceName) || fail=1
 if [ "$fail" = "1" ]; then
  log error "Error LUKS formatting device $deviceName"
  return 1
 else
  open_encrypted_device deviceName $deviceName
  #echo "After open encrypted device, deviceName=$deviceName"
 fi
 _reply=$deviceName
 eval "$outDeviceName='$_reply'"
 return 0
}

prepare_device() {
 local deviceName=$1
 local deviceType=$2
 local fsType=$3
 local label=$4
 local encrypt=${5:-false}
 
 [ -z "$fsType" ] && fsType=ext4
 
 if [ ! -z "$label" -a ! -b "$deviceName" ]; then
  deviceName=$(blkid -o value -s TYPE -L $label)
 fi
 if [ -z "$deviceName" ]; then
  log warn "Invalid device [$deviceName] (label=$label). Skipping device preparation."
  return 1
 fi
 
 local filesys=$(blkid -o value -s TYPE $deviceName)
 if [ ! -z "$filesys" ]; then
  log warn "File system ($filesys) already setup on device $deviceName. No formatting will be done."
 else
  if $encrypt; then
   if [ "$deviceType" = "ephemeral" -o "$deviceType" = "raid" ]; then
    encrypt_device deviceName $deviceName $deviceType
   fi
  fi
  log info "Create file system on $deviceName..."
  local OPTS=()
  [ "$fsType" = "ext4" ] && OPTS+=(-F)
  [ "$fsType" = "xfs" ] && OPTS+=(-f)
  OPTS+=(-q)
  if [ ! -z "$label" ]; then
   OPTS+=(-L $label)
  fi
  mkfs -t $fsType ${OPTS[@]} $deviceName
 fi
 
 return 0
}

waiting_raid_active() {
 local raidDeviceName=$1
 log info "Waiting for array $deviceName to be ready..."
 while true; do
  state=$(mdadm --detail $raidDeviceName | grep "State :" | awk '{print $3}')
  if [ "$state" = "clean" -o "$state" = "active" ]; then
   break;
  else
   sleep 1s
  fi
 done
 return 0
}

prepare_raid() {
 local deviceName=$1
 local level=$2
 local name=$3
 local numberOfDevices=$4
 local devices=$5
 # --name=MY_RAID
 exists=""
 if [ -f /etc/mdadm.conf ]; then
  exists=$(cat /etc/mdadm.conf | grep $deviceName)
 fi
 if [ -z "$exists" ]; then
  log info "Creating array [$name] from [$deviceName] using $numberOfDevices: [$devices]..."
  #mdadm --detail --scan > /var/log/hpcc_cluster.log.debug
  mdadm --create --verbose $deviceName --level=$level --name=$name --raid-devices=$numberOfDevices $devices
  if [ $? -eq 1 ]; then
   log error "Error creating raid."
   return 1
  fi
  waiting_raid_active $deviceName
 else
  log warn "Array (name=$name) already exists at $deviceName."
 fi
 return 0
}

prepare_mount() {
 local mount=$1
 local mapsTo=$2
 if [ ! -z "$mount" ]; then
  [ ! -d $mount ] && mkdir -p $mount
 fi
 if [ ! -z "$mapsTo" ]; then
  if [  -L $mapsTo ]; then
   #TODO: check symlink resolves to $mount
   log info "$mount already mapped to $mapsTo."
  else
   if [ -d $mapsTo ]; then
    log info "Renaming $mapsTo to ${mapsTo}_orig..."
    mv $mapsTo ${mapsTo}_orig
   fi
   dir=$( dirname $mapsTo )
   [ ! -d $dir ] && mkdir -p $dir
  fi
 fi
 
 if [ -d $mount -a ! -z "$mapsTo" ]; then
  [ ! -L $mapsTo ] && ln -s $mount $mapsTo
  #chown -R hpcc:hpcc $mount
 fi
 return 0
}

already_mounted() {
 [ ! -z "$(cat /proc/mounts | grep $1)" ]
}

mount_device() {
 local deviceName=$1
 local deviceType=$2
 local mount=$3
 local label=$4
 
 # Setting up mounts/mounting
 local filesys=$(blkid -o value -s TYPE $deviceName)
 # if encrypted, filesys will be crypto_LUKS
 if [ "$filesys" = "crypto_LUKS" ]; then
  log info "Dealing with encrypted device for $deviceName (filesys=$filesys)..."
  open_encrypted_device deviceName $deviceName
  log info "New device name: $deviceName."
  filesys=$(blkid -o value -s TYPE $deviceName)
 fi
 
 #WARNING: gotta be careful with ephemeral drives. Reason is that, upon stop-start, ephemeral drive is again brand new and need to be formatted again, and therefore mounted manually.
 if [ "$deviceType" = "ephemeral" ]; then
  if ! already_mounted $deviceName; then
   log info "Mounting ephemeral/raid device $deviceName to $mount..."
   mount -t $filesys -o defaults,noatime,nodiratime,nofail $deviceName $mount
  else
   log info "$deviceName already mounted."
  fi
 else
  local pattern="$deviceName"
  if [ ! -z "$label" ]; then
   pattern+="\\|$label"
  fi
  local present=$(cat /etc/fstab | grep $pattern)
  if [ -z "$present" ]; then
   log info "Installing $deviceName with mount point $mount in fstab..."
   if [ "$deviceType" = "raid" -a ! -z "$label" ]; then
    echo "LABEL=$label $mount $filesys defaults,noatime,nodiratime,nofail 0 2" >> /etc/fstab
   else
    echo "$deviceName $mount $filesys defaults,noatime,nodiratime,nofail 0 2" >> /etc/fstab
   fi
  fi
 fi
 return 0
}

ensure_hpcc_permissions() {
 log info "Making sure hpcc user has permissions to volumes..."
 local dirs=()
 local mount
 if [ -f /opt/hpcc-cluster/volumes.maps ]; then
  source /opt/hpcc-cluster/volumes.maps
  local volumesMappingsLength=${#volumesMappings[@]}
  log info "\tFound $volumesMappingsLength volume entries..."
  for (( i=0; i < $volumesMappingsLength; i+=7 )); do
   mount=${volumesMappings[$i+3]}
   [ ! -z "$mount" ] && dirs+=($mount)
  done
 fi
 
 if [ -f /opt/hpcc-cluster/raids.maps ]; then
  source /opt/hpcc-cluster/raids.maps
  local raidsMappingsLength=${#raidsMappings[@]}
  log info "\tFound $raidsMappingsLength raid entries..."
  for (( i=0; i < $raidsMappingsLength; i+=7 )); do
   mount=${raidsMappings[$i+4]}
   [ ! -z "$mount" ] && dirs+=($mount)
  done
 fi
 local dirsLength=${#dirs[@]}
 [ $dirsLength -gt 0 ] && chown -R hpcc:hpcc ${dirs[@]}
 return 0
}